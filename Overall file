#The steps to get top 50 recommendations based on the summary of 'Pirates'
test=> CREATE TABLE movies (
test(> );
ERROR:  relation "movies" already exists
test=> CREATE TABLE movies1 (url text, title text, ReleaseDate text, Distributor text, Starring text, Summary text, Director text, Genre text, Rating text, Runtime text, Userscore text, Metascore text, scoreCounts text); 
CREATE TABLE
test=> \copy movies FROM '/home/pi/RSL/moviesFromMetacritic.csv' delimiter ';' csv header;
ERROR:  missing data for column "lexemessummary"
CONTEXT:  COPY movies, line 2: "4;4;38902;"[ ""Leisure Time Features"", "" | "" ]";[];;"[ ""Ilya Khrjanovsky"" ]";"[ """", ""Drama""..."
test=> \copy movies1 FROM '/home/pi/RSL/moviesFromMetacritic.csv' delimiter ';' csv header;
COPY 5229
test=> SELECT * FROM movies1 where url='pirates-of-the-caribbean-the-curse-of-the-black-pearl';

[1]+  Stopped                 psql test
pi@raspberrypi:~ $ psql test
psql (11.13 (Raspbian 11.13-0+deb10u1))
Type "help" for help.

test=> ALTER TABLE movies1 ADD lexemesSummary tsvector;
ALTER TABLE
test=> UPDATE movies1 SET lexemesSummary = to_tsvector(Summary);
UPDATE 5229
test=> SELECT url FROM movies1 WHERE lexemesSummary @@ to_tsquery('pirate');
                          url                          
-------------------------------------------------------
 bukowski-born-into-this
 captain-phillips
 lucky-number-slevin
 pan
 the-pirates!-band-of-misfits
 pirates-of-the-caribbean-the-curse-of-the-black-pearl
 pirates-of-the-caribbean-at-worlds-end
 the-pirates-who-dont-do-anything-a-veggietales-movie
 pirates-of-the-caribbean-dead-men-tell-no-tales
 the-princess-bride
 stardust
(11 rows)

test=> ALTER TABLE movies1 ADD rank float4;
ALTER TABLE
test=> UPDATE movies1 SET rank = ts_rank(lexemesSummary,plainto_tsquery((SELECT Summary FROM movies1 WHERE url='pan')));
UPDATE 5229
test=> CREATE TABLE recommendationsBasedOnSummaryField2 AS SELECT url, rank FROM movies1 WHERE rank < 0.99 ORDER BY rank DESC LIMIT 50;
SELECT 50
test=> \copy(SELECT * FROM recommendationsBasedOnSummaryField2) to '/home/pi/RSL/top50recommendations.csv' WITH csv;
Invalid command \copy(SELECT. Try \? for help.
test=> \copy (SELECT * FROM recommendationsBasedOnSummaryField2) to '/home/pi/RSL/top50recommendations.csv' WITH csv;
COPY 50
test=> ^C
test=> ^C
test-> 
test-> \q


#The steps to get top 50 recommendations based on the title of 'Pirates'

test=> ALTER TABLE  movies1 ADD lexemesTitle tsvector;
ALTER TABLE
test=> UPDATE movies1 SET lexemesTitle = to_tsvector(Title);
UPDATE 5229
test=> SELECT url FROM movies1 WHERE lexemesTitle @@ to_tsquery('pirate');
                          url                          
-------------------------------------------------------
 the-pirates-who-dont-do-anything-a-veggietales-movie
 the-pirates!-band-of-misfits
 pirates-of-the-caribbean-the-curse-of-the-black-pearl
 pirates-of-the-caribbean-dead-mans-chest 
 pirates-of-the-caribbean-at-worlds-end
 pirates-of-the-caribbean-dead-men-tell-no-tales
(6 rows)

test=> ALTER TABLE movies1 ADD rank float4;
ERROR:  column "rank" of relation "movies1" already exists
test=> ALTER TABLE movies1 ADD rank2 float3;
ERROR:  type "float3" does not exist
LINE 1: ALTER TABLE movies1 ADD rank2 float3;
                                      ^
test=> ALTER TABLE movies1 ADD rank2 float4;
test=> UPDATE movies1 SET rank2 = ts_rank(lexemesTitle,plainto_tsquery((SELECT Title FROM movies1 WHERE url='pan)));
test'> ALTER TABLE movies1 ADD rank2 float4;
test'> UPDATE movies1 SET rank2 = ts_rank(lexemesTitle,plainto_tsquery((SELECT Title FROM movies1 WHERE url='pan')));
test'> ^C
test=> CREATE TABLE recommendationsBasedOnTitleField AS SELECT url, rank2 FROM movies1 WHERE rank2 < 0.99 ORDER BY rank2 DESC LIMIT 50;
SELECT 50
test=> \copy (SELECT * FROM recommendationsBasedOnTitleField) to '/home/pi/RSL/top50recommendationsTitle.csv' WITH csv;
COPY 50
test=> \q


#The steps to get top 50 recommendations based on the starring in 'Pirates'
test=> ALTER TABLE movies1 ADD lexemesStarring tsvector;
ALTER TABLE
test=> UPDATE movies1 SET lexemesStarring = to_tsvector(Starring);
UPDATE 5229
test=> SELECT url FROM movies1 WHERE lexemesStarring @@ to_tsquery('pirate');
 url 
-----
(0 rows)

test=> SELECT url FROM movies1 WHERE lexemesStarring @@ to_tsquery('Orlando Bloom');
ERROR:  syntax error in tsquery: "Orlando Bloom"
test=> SELECT url FROM movies1 WHERE lexemesStarring @@ to_tsquery('Orlando-Bloom');
 url 
-----
(0 rows)

test=> SELECT url FROM movies1 WHERE lexemesStarring @@ to_tsquery('Johnny-Depp');
 url 
-----
(0 rows)

test=> SELECT url FROM movies1 WHERE lexemesStarring @@ to_tsquery('Geoffrey-Rush');
 url 
-----
(0 rows)

test=> ALTER TABLE movies1 ADD rank3 float4;
ALTER TABLE
test=> UPDATE movies1 SET rank = ts_rank(lexemesStarring,plainto_tsquery((SELECT Starring FROM movies1 WHERE url='pan')));
UPDATE 5229
test=> CREATE TABLE recommendationsBasedOnStarringField AS SELECT url, rank FROM movies1 WHERE rank < 0.99 ORDER BY rank DESC LIMIT 50;
SELECT 50
test=> \copy (SELECT * FROM recommendationsBasedOnStarringField) to '/home/pi/RSL/top50recommendationsStarring.csv' WITH csv;
COPY 50
test=> /q
test-> \q


#The steps to get top 50 recommendations based on the summary of 'Harry Potter'
test=> CREATE TABLE movie;
ERROR:  syntax error at or near ";"
LINE 1: CREATE TABLE movie;
                          ^
test=> CREATE TABLE movies ();
ERROR:  relation "movies" already exists
test=> CREATE TABLE movie ();
CREATE TABLE
test=> DROP TABLE movie;
DROP TABLE
test=> CREATE TABLE movie (url text, title text, ReleaseDate text, Distributor text, Starring text, Summary text, Director text, Genre text, Rating text, Runtime text, Userscore text, Metascore text, scoreCounts text);
CREATE TABLE
test=> \copy movie FROM '/home/pi/RSL/moviesFromMetacritic.csv' delimiter ';' csv header;
COPY 5229
test=> SELECT * FROM movie where url='harry-potter-and-the-chamber-of-secrets';
[1]+  Stopped                 psql test
pi@raspberrypi:~ $ psql test
psql (11.13 (Raspbian 11.13-0+deb10u1))
Type "help" for help.

test=> ALTER TABLE movie ADD lexemesSummary tsvector;
ALTER TABLE
test=> UPDATE TABLE movie SET lexemesSummary = to_tsvector(Summary);
ERROR:  syntax error at or near "TABLE"
LINE 1: UPDATE TABLE movie SET lexemesSummary = to_tsvector(Summary)...
               ^
test=> UPDRATE movie SET lexemesSummary = to_tsvector(Summary);
ERROR:  syntax error at or near "UPDRATE"
LINE 1: UPDRATE movie SET lexemesSummary = to_tsvector(Summary);
        ^
test=> UPDATE movie SET lexemesSummary = to_tsvector(Summary);
UPDATE 5229
test=> SELECT url FROM movie WHERE lexemesSummary @@ to_tsquery('potter');
                    url                    
-------------------------------------------
 harry-potter-and-the-sorcerers-stone
 harry-potter-and-the-chamber-of-secrets
 harry-potter-and-the-order-of-the-phoenix
 percy-jackson-sea-of-monsters
 the-tango-lesson
(5 rows)

test=> ALTER TABLE movie ADD rank float4;
ALTER TABLE
test=> UPDATE movie SET rank = ts_rank(lexemesSummary,plainto_tsquery((SELECT Summary FROM movie WHERE url='harry-potter-and-the-chamber-of-secrets')));
UPDATE 5229
test=> CREATE TABLE recommendationsBasedOnSummaryField AS SELECT url, rank FROM movie WHERE rank < 0.99 ORDER BY rank DESC LIMIT 50;
ERROR:  relation "recommendationsbasedonsummaryfield" already exists
test=> CREATE TABLE recommendationsBasedOnSummaryField3 AS SELECT url, rank FROM movie WHERE rank < 0.99 ORDER BY rank DESC LIMIT 50;
SELECT 50
test=> \copy (SELECT * FROM  recommendationsBasedOnSummaryField3) to '/home/pi/RSL/top50recommendationsHarrySummary.csv' WITH csv;
COPY 50


#The steps to get top 50 recommendations based on the title of 'Harry Potter'
test=> ALTER TABLE movie ADD rank1 float4;
ALTER TABLE
test=> UPDATE movie SET rank1 = ts_rank(lexemesTitle,plainto_tsquery((SELECT Title FROM movie WHERE url='potter'))); 
ERROR:  column "lexemestitle" does not exist
LINE 1: UPDATE movie SET rank1 = ts_rank(lexemesTitle,plainto_tsquer...
                                         ^
test=> ALTER TABLE movie ADD lexemesTitle tsvector;
ALTER TABLE
test=> UPDATE movie SET lexemesTitle = to_tsvector(Title);
UPDATE 5229
test=> SELECT url FROM movie WHERE lexemesTitle @@ to_tsquery('potter');
                    url                    
-------------------------------------------
 harry-potter-and-the-sorcerers-stone
 harry-potter-and-the-chamber-of-secrets
 harry-potter-and-the-prisoner-of-azkaban
 harry-potter-and-the-goblet-of-fire
 harry-potter-and-the-order-of-the-phoenix
 harry-potter-and-the-half-blood-prince
(6 rows)

test=> UPDATE movie SET rank1 = ts_rank(lexemesTitle,plainto_tsquery((SELECT Title FROM movie WHERE url='potter')));
UPDATE 5229
test=> CREATE TABLE recommendationsBasedOnTitleField1 AS SELECT url, rank1 FROM movie WHERE rank < 0.99 ORDER BY rank DESC LIMIT 50;
SELECT 50
test=> \copy (SELECT * FROM recommendationsBasedOnTitleField1) to '/home/pi/RSL/top50recommendationsHarryTitle.csv' WITH csv;
COPY 50


#The steps to get top 50 recommendations based on the starring in 'Harry Potter'
test=> ALTER TABLE movie ADD rank2 float4;
ALTER TABLE
test=> ALTER TABLE movie ADD lexemesStarring tsvector;
ALTER TABLE
test=> UPDATE movie SET lexemesStarring = to_tsvector(Starring);
UPDATE 5229
test=> SELECT url FROM movie WHERE lexemesStarring @@ to_tsquery('potter');
            url             
----------------------------
 along-came-a-spider
 big-hero-6
 head-over-heels
 the-last-house-on-the-left
 the-tango-lesson
(5 rows)

test=> SELECT url FROM movie WHERE lexemesStarring @@ to_tsquery('Daniel-Radcliffe');
 url 
-----
(0 rows)

test=> SELECT url FROM movie WHERE lexemesStarring @@ to_tsquery('daniel-radcliffe');
 url 
-----
(0 rows)

test=> SELECT url FROM movie WHERE lexemesStarring @@ to_tsquery('emma-watson');
 url 
-----
(0 rows)

test=> SELECT url FROM movie WHERE lexemesStarring @@ to_tsquery('Emma-Watson');
 url 
-----
(0 rows)

test=> SELECT url FROM movie WHERE lexemesStarring @@ to_tsquery('Rupert-Grint');
 url 
-----
(0 rows)

test=> SELECT url FROM movie WHERE lexemesStarring @@ to_tsquery('rupert-grint');
 url 
-----
(0 rows)

test=> SELECT url FROM movie WHERE lexemesStarring @@ to_tsquery('potter');
            url             
----------------------------
 along-came-a-spider
 big-hero-6
 head-over-heels
 the-last-house-on-the-left
 the-tango-lesson
(5 rows)

test=> UPDATE movie SET rank2 = ts_rank(lexemesStarring,plainto_tsquery((SELECT Summary FROM movie WHERE url='potter')));
UPDATE 5229
test=> CREATE TABLE recommendationsBasedOnStarringField1 AS SELECT url, rank2 FROM movie WHERE rank < 0.99 ORDER BY rank DESC LIMIT 50;
SELECT 50
test=> \copy (SELECT * FROM recommendationsBasedOnStarringField1) to '/home/pi/RSL/top50recommendations.csv' WITH csv;
COPY 50


#What do I think of the recommendations

The recommendations I received were very good. There are a lot of movies which I haven't watched yet.
Therefore I am very happy with the results and I did not expect them to be within the top 10 like:...


#The steps to get started with Github

The Golden Snitch Sniffer
This is a project that uses multiple long-range ultrasonic sensors to find an track an object flying in three-dimensional space. It displays the object's coordinates, speed, and trajectory through a VR headset.

# Codes for creating github:
pi@raspberrypi:~ $ git --global user.name "Pieter-Jaap Haarhuis"
unknown option: --global
usage: git [--version] [--help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           <command> [<args>]
pi@raspberrypi:~ $ git config --global user.name "Pieter-Jaap Haarhuis"
pi@raspberrypi:~ $ git config --global user.email "pieter-jaap.haarhuis@hva.nl"
pi@raspberrypi:~ $ git config --global core.editor init
pi@raspberrypi:~ $ mkdir snitch-sniffer
pi@raspberrypi:~ $ cd snitch-sniffer
pi@raspberrypi:~/snitch-sniffer $ README.md
bash: README.md: command not found
pi@raspberrypi:~/snitch-sniffer $ # The Golden Snitch Sniffer
pi@raspberrypi:~/snitch-sniffer $ dir
README.md
pi@raspberrypi:~/snitch-sniffer $ ls
README.md
pi@raspberrypi:~/snitch-sniffer $ git init
Initialized empty Git repository in /home/pi/snitch-sniffer/.git/
pi@raspberrypi:~/snitch-sniffer $ ls
README.md
pi@raspberrypi:~/snitch-sniffer $ dir /A
dir: cannot access '/A': No such file or directory
pi@raspberrypi:~/snitch-sniffer $ ls -a
.  ..  .git  README.md
pi@raspberrypi:~/snitch-sniffer $ ls -a .git
.  ..  branches  config  description  HEAD  hooks  info  objects  refs
pi@raspberrypi:~/snitch-sniffer $ git add README.md
pi@raspberrypi:~/snitch-sniffer $ git add --all
pi@raspberrypi:~/snitch-sniffer $ git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)

	new file:   README.md

pi@raspberrypi:~/snitch-sniffer $ git commit -am "add README.md"
[master (root-commit) 27997b7] add README.md
 1 file changed, 2 insertions(+)
 create mode 100644 README.md
pi@raspberrypi:~/snitch-sniffer $ git log README.md
commit 27997b70118c293cfa903f122561d589acf03a27 (HEAD -> master)
Author: Pieter-Jaap Haarhuis <pieter-jaap.haarhuis@hva.nl>
Date:   Thu Nov 4 11:15:06 2021 +0100

    add README.md
pi@raspberrypi:~/snitch-sniffer $ git status
On branch master
nothing to commit, working tree clean
pi@raspberrypi:~/snitch-sniffer $ git checkout -b lidar-version
Switched to a new branch 'lidar-version'
pi@raspberrypi:~/snitch-sniffer $ git status
On branch lidar-version
nothing to commit, working tree clean
pi@raspberrypi:~/snitch-sniffer $ git branche
git: 'branche' is not a git command. See 'git --help'.

The most similar command is
	branch
pi@raspberrypi:~/snitch-sniffer $ git branch
* lidar-version
  master
pi@raspberrypi:~/snitch-sniffer $ git checkout master
Switched to branch 'master'
pi@raspberrypi:~/snitch-sniffer $ git merge lidar-version
Already up to date.
pi@raspberrypi:~/snitch-sniffer $ git remote add origin https://github.com/pieter-jaap/Snitch-sniffer.git
pi@raspberrypi:~/snitch-sniffer $ git push -u origin master
Username for 'https://github.com': 
Password for 'https://github.com': 
remote: No anonymous write access.
fatal: Authentication failed for 'https://github.com/pieter-jaap/Snitch-sniffer.git/'
pi@raspberrypi:~/snitch-sniffer $ 
pi@raspberrypi:~/snitch-sniffer $ git push -u origin master
Username for 'https://github.com': Pieter-Jaap
Password for 'https://Pieter-Jaap@github.com': 
remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.
remote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.
fatal: Authentication failed for 'https://github.com/pieter-jaap/Snitch-sniffer.git/'
pi@raspberrypi:~/snitch-sniffer $ git clone https://github.com/HelpfulUser/Snitch-sniffer
Cloning into 'Snitch-sniffer'...
Username for 'https://github.com': Pieter-Jaap
Password for 'https://Pieter-Jaap@github.com': 
remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.
remote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.
fatal: Authentication failed for 'https://github.com/HelpfulUser/Snitch-sniffer/'
pi@raspberrypi:~/snitch-sniffer $ \q


#Python
